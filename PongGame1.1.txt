import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.BasicStroke;
import javax.swing.JPanel;
import javax.swing.JFrame;

public class PongGame extends JPanel implements KeyListener, ActionListener {
    private int paddle1Y = 160, paddle2Y = 160;
    private int ballX = 480, ballY = 272;
    private double ballDirX = -4, ballDirY = 4;
    private final int PADDLE_WIDTH = 16, PADDLE_HEIGHT = 64;
    private final int BALL_SIZE = 16;
    private int score1 = 0, score2 = 0;
    private Timer timer;
    private double speedMultiplier = 1.05;
    private final int SCORE_LIMIT = 10; // LÃ­mite de puntaje
    private final int GAME_TIME = 120; // Tiempo de juego en segundos
    private long startTime;

    // Movement flags
    private boolean upPressed = false, downPressed = false;
    private boolean wPressed = false, sPressed = false;

    public PongGame() {
        setPreferredSize(new Dimension(1024, 576)); 
        setBackground(new Color(63,113,146));
        setFocusable(true);
        addKeyListener(this);
        timer = new Timer(20, this); 
        timer.start();

        startTime = System.currentTimeMillis(); // Inicializar el tiempo de inicio

        JFrame frame = new JFrame("Pong Game");
        frame.add(this);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }

    private void resetGame() {
        paddle1Y = 256; 
        paddle2Y = 256;
        ballX = 480;
        ballY = 272;
        score1 = 0;
        score2 = 0;
        ballDirX = -4;
        ballDirY = 4;
        speedMultiplier = 1.05; // Resetear el multiplicador de velocidad
        startTime = System.currentTimeMillis(); // Reiniciar el tiempo de inicio
        repaint();
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        Graphics2D g2d = (Graphics2D) g;
        
        // Draw middle line
        g.setColor(Color.WHITE);
        g.drawLine(512, 0, 512, 576);
        
        g2d.setStroke(new BasicStroke(2));
        
        // Linea medio
        g.setColor(Color.WHITE);
        g.drawLine(0, 288, 1024, 288);
        
        
        
        /*
        // linea 2
        g.setColor(Color.WHITE);
        g.drawLine(0, 70, 1024, 70);
        // linea 3
        g.setColor(Color.WHITE);
        g.drawLine(0, 506, 1024, 506);
		*/

        // Draw left paddle (Player 1)
        g.setColor(new Color(240,76,49));
        g.fillRect(16, paddle1Y, PADDLE_WIDTH, PADDLE_HEIGHT);

        // Draw right paddle (Player 2)
        g.setColor(new Color(40,66,166));
        g.fillRect(992, paddle2Y, PADDLE_WIDTH, PADDLE_HEIGHT);

        // Draw ball
        g.setColor(new Color(237,195,49));
        g.fillOval(ballX, ballY, BALL_SIZE, BALL_SIZE);

        // Draw scores
        drawScore(g, score1, 256, 48);
        drawScore(g, score2, 768, 48);

        // Draw remaining time
        long elapsedTime = (System.currentTimeMillis() - startTime) / 1000;
        long remainingTime = GAME_TIME - elapsedTime;
        if (remainingTime > 0) {
            g.setFont(new Font("Monospaced", Font.PLAIN, 24));
            g.setColor(Color.BLACK);
            g.drawString("Tiempo: " + remainingTime + "s", getWidth() / 2 - 70, 40);
        } else {
            timer.stop();
            g.drawString("Es un EMPATE!", getWidth() / 2 - 50, getHeight() / 2);
        }
    }

    private void drawScore(Graphics g, int score, int x, int y) {
        g.setFont(new Font("Monospaced", Font.PLAIN, 32));
        g.drawString(String.valueOf(score), x, y);
    }

    public void actionPerformed(ActionEvent e) {
        ballX += ballDirX;
        ballY += ballDirY;

        // Check collision with top and bottom walls
        if (ballY <= 70	 || ballY >= getHeight() -70- BALL_SIZE) {
            ballDirY = -ballDirY;
        }

        // Check collision with left paddle (Player 1)
        if (ballX <= 32 && ballY + BALL_SIZE >= paddle1Y && ballY <= paddle1Y + PADDLE_HEIGHT) {
            ballDirX = -ballDirX;
            increaseBallSpeed();
        }

        // Check collision with right paddle (Player 2)
        if (ballX >= getWidth() - 48 && ballY + BALL_SIZE >= paddle2Y && ballY <= paddle2Y + PADDLE_HEIGHT) {
            ballDirX = -ballDirX;
            increaseBallSpeed();
        }

        // Check for scoring
        if (ballX < 0) {
            score2++;
            if (score2 >= SCORE_LIMIT) {
                timer.stop(); // Detener el juego
                JOptionPane.showMessageDialog(this, "Player 2 Wins!");
                resetGame();
            } else {
                resetBall();
            }
        } else if (ballX > getWidth()) {
            score1++;
            if (score1 >= SCORE_LIMIT) {
                timer.stop(); // Detener el juego
                JOptionPane.showMessageDialog(this, "Player 1 Wins!");
                resetGame();
            } else {
                resetBall();
            }
        }

        // Move paddles based on key presses
        if (wPressed && paddle1Y > 0) {
            paddle1Y -= 8;
        }
        if (sPressed && paddle1Y < getHeight() - PADDLE_HEIGHT) {
            paddle1Y += 8;
        }
        if (upPressed && paddle2Y > 0) {
            paddle2Y -= 8;
        }
        if (downPressed && paddle2Y < getHeight() - PADDLE_HEIGHT) {
            paddle2Y += 8;
        }

        repaint();
    }

    private void resetBall() {
        ballX = 480; 
        ballY = 272;
        ballDirX = -4;
        ballDirY = 4;
        speedMultiplier = 1.5; 
    }

    private void increaseBallSpeed() {
        ballDirX *= speedMultiplier;
        ballDirY *= speedMultiplier;


    }

    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        if (key == KeyEvent.VK_W) {
            wPressed = true;
        }
        if (key == KeyEvent.VK_S) {
            sPressed = true;
        }
        if (key == KeyEvent.VK_UP) {
            upPressed = true;
        }
        if (key == KeyEvent.VK_DOWN) {
            downPressed = true;
        }
    }

    public void keyReleased(KeyEvent e) {
        int key = e.getKeyCode();
        if (key == KeyEvent.VK_W) {
            wPressed = false;
        }
        if (key == KeyEvent.VK_S) {
            sPressed = false;
        }
        if (key == KeyEvent.VK_UP) {
            upPressed = false;
        }
        if (key == KeyEvent.VK_DOWN) {
            downPressed = false;
        }
    }

    public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        SwingUtilities.invokeLater(PongGame::new);
    }
}
