package si;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class PongGame extends JPanel implements KeyListener, ActionListener {
    private int paddle1Y = 160, paddle2Y = 160, paddle3X = 224;
    private int ballX = 240, ballY = 240;
    private int ballDirX = -4, ballDirY = 4;
    private final int PADDLE_WIDTH = 16, PADDLE_HEIGHT = 64;
    private final int BALL_SIZE = 16;
    private int score1 = 0, score2 = 0, score3 = 0;
    private Timer timer;
    private int playerCount = 2;

    // Movement flags
    private boolean upPressed = false, downPressed = false;
    private boolean wPressed = false, sPressed = false;
    private boolean aPressed = false, dPressed = false;

    public PongGame() {
        setPreferredSize(new Dimension(512, 512));
        setBackground(Color.BLACK);
        setFocusable(true);
        addKeyListener(this);
        timer = new Timer(20, this);  // Faster timer for smooth paddle movement
        timer.start();
        createMenu();
    }

    private void createMenu() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = new JMenu("Options");
        JMenuItem twoPlayers = new JMenuItem("2 Players");
        JMenuItem threePlayers = new JMenuItem("3 Players");

        twoPlayers.addActionListener(e -> setPlayerCount(2));
        threePlayers.addActionListener(e -> setPlayerCount(3));

        menu.add(twoPlayers);
        menu.add(threePlayers);
        menuBar.add(menu);

        JFrame frame = new JFrame("Pong Game");
        frame.setJMenuBar(menuBar);
        frame.add(this);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }

    private void setPlayerCount(int count) {
        playerCount = count;
        resetGame();
    }

    private void resetGame() {
        paddle1Y = 160;
        paddle2Y = 160;
        paddle3X = 224;
        ballX = 240;
        ballY = 240;
        score1 = 0;
        score2 = 0;
        score3 = 0;
        ballDirX = -4;
        ballDirY = 4;
        repaint();
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Draw middle line
        g.setColor(Color.WHITE);
        g.drawLine(256, 0, 256, 512);

        // Draw paddles
        g.fillRect(16, paddle1Y, PADDLE_WIDTH, PADDLE_HEIGHT);
        g.fillRect(480, paddle2Y, PADDLE_WIDTH, PADDLE_HEIGHT);
        if (playerCount == 3) {
            g.fillRect(paddle3X, 480, PADDLE_HEIGHT, PADDLE_WIDTH);
        }

        // Draw ball
        g.fillOval(ballX, ballY, BALL_SIZE, BALL_SIZE);

        // Draw scores
        drawScore(g, score1, 128, 48);
        drawScore(g, score2, 384, 48);
        if (playerCount == 3) {
            drawScore(g, score3, 256, 448);
        }
    }

    private void drawScore(Graphics g, int score, int x, int y) {
        try {
            Font pixelFont = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream("/fonts/PressStart2P.ttf")).deriveFont(32f);
            g.setFont(pixelFont);
        } catch (Exception e) {
            e.printStackTrace();
            g.setFont(new Font("Monospaced", Font.PLAIN, 32));
        }
        g.drawString(String.valueOf(score), x, y);
    }

    public void actionPerformed(ActionEvent e) {
        ballX += ballDirX;
        ballY += ballDirY;

        if (ballY <= 0 || ballY >= getHeight() - BALL_SIZE) {
            ballDirY = -ballDirY;
        }

        if (ballX <= 32 && ballY >= paddle1Y && ballY <= paddle1Y + PADDLE_HEIGHT) {
            ballDirX = -ballDirX;
        }

        if (ballX >= 464 && ballY >= paddle2Y && ballY <= paddle2Y + PADDLE_HEIGHT) {
            ballDirX = -ballDirX;
        }

        if (playerCount == 3 && ballY >= 464 && ballX >= paddle3X && ballX <= paddle3X + PADDLE_HEIGHT) {
            ballDirY = -ballDirY;
        }

        if (ballX < 0) {
            score2++;
            resetBall();
        } else if (ballX > getWidth()) {
            score1++;
            resetBall();
        } else if (playerCount == 3 && ballY > getHeight()) {
            score3++;
            resetBall();
        }

        // Move paddles based on key presses
        if (wPressed && paddle1Y > 0) {
            paddle1Y -= 8;
        }
        if (sPressed && paddle1Y < getHeight() - PADDLE_HEIGHT) {
            paddle1Y += 8;
        }
        if (upPressed && paddle2Y > 0) {
            paddle2Y -= 8;
        }
        if (downPressed && paddle2Y < getHeight() - PADDLE_HEIGHT) {
            paddle2Y += 8;
        }
        if (playerCount == 3) {
            if (aPressed && paddle3X > 0) {
                paddle3X -= 8;
            }
            if (dPressed && paddle3X < getWidth() - PADDLE_HEIGHT) {
                paddle3X += 8;
            }
        }

        repaint();
    }

    private void resetBall() {
        ballX = 240; // Reset ball to the center of the field
        ballY = 240;
        ballDirX = -ballDirX; // Reverse the direction of the ball
        ballDirY = -ballDirY;
    }

    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        if (key == KeyEvent.VK_W) {
            wPressed = true;
        }
        if (key == KeyEvent.VK_S) {
            sPressed = true;
        }
        if (key == KeyEvent.VK_UP) {
            upPressed = true;
        }
        if (key == KeyEvent.VK_DOWN) {
            downPressed = true;
        }
        if (playerCount == 3) {
            if (key == KeyEvent.VK_A) {
                aPressed = true;
            }
            if (key == KeyEvent.VK_D) {
                dPressed = true;
            }
        }
    }

    public void keyReleased(KeyEvent e) {
        int key = e.getKeyCode();
        if (key == KeyEvent.VK_W) {
            wPressed = false;
        }
        if (key == KeyEvent.VK_S) {
            sPressed = false;
        }
        if (key == KeyEvent.VK_UP) {
            upPressed = false;
        }
        if (key == KeyEvent.VK_DOWN) {
            downPressed = false;
        }
        if (playerCount == 3) {
            if (key == KeyEvent.VK_A) {
                aPressed = false;
            }
            if (key == KeyEvent.VK_D) {
                dPressed = false;
            }
        }
    }

    public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        SwingUtilities.invokeLater(PongGame::new);
    }
}

